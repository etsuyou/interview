import{_ as s,c as i,o as a,a4 as e}from"./chunks/framework.B2xMVIVo.js";const E=JSON.parse('{"title":"Vue 面试题","description":"","frontmatter":{},"headers":[],"relativePath":"interview/vue.md","filePath":"interview/vue.md","lastUpdated":1719234304000}'),t={name:"interview/vue.md"},n=[e(`<h1 id="vue-面试题" tabindex="-1">Vue 面试题 <a class="header-anchor" href="#vue-面试题" aria-label="Permalink to &quot;Vue 面试题&quot;">​</a></h1><h2 id="_1-mvvm" tabindex="-1">1. MVVM <a class="header-anchor" href="#_1-mvvm" aria-label="Permalink to &quot;1. MVVM&quot;">​</a></h2><h3 id="mvvm-model-view-viewmodel" tabindex="-1">MVVM（Model-View-ViewModel） <a class="header-anchor" href="#mvvm-model-view-viewmodel" aria-label="Permalink to &quot;MVVM（Model-View-ViewModel）&quot;">​</a></h3><p>MVVM 是一种软件架构模式，主要用于前端开发，尤其是在现代前端框架（如 Vue.js、Angular 和 React）中广泛应用。它的核心思想是将用户界面（View）与业务逻辑（Model）分离，通过 ViewModel 来连接 View 和 Model，从而使开发和维护更加方便。</p><h4 id="_1-model" tabindex="-1">1. Model <a class="header-anchor" href="#_1-model" aria-label="Permalink to &quot;1. Model&quot;">​</a></h4><p>Model 代表应用程序的业务逻辑和数据。它负责数据的获取、处理和存储。Model 通常是纯粹的逻辑代码，不包含任何 UI 相关的内容。它可以通过 API 调用与后端服务器进行数据交互。</p><h4 id="_2-view" tabindex="-1">2. View <a class="header-anchor" href="#_2-view" aria-label="Permalink to &quot;2. View&quot;">​</a></h4><p>View 代表用户界面，负责展示数据。它直接与用户交互，接收用户的输入并展示 Model 中的数据。View 通常是由 HTML、CSS 和 JavaScript 组成的前端页面。</p><h4 id="_3-viewmodel" tabindex="-1">3. ViewModel <a class="header-anchor" href="#_3-viewmodel" aria-label="Permalink to &quot;3. ViewModel&quot;">​</a></h4><p>ViewModel 是 MVVM 模式的核心部分，它充当了 View 和 Model 之间的桥梁。ViewModel 负责将 Model 中的数据转换为 View 可以使用的格式，并将用户在 View 中的操作传递给 Model。ViewModel 通过数据绑定（Data Binding）技术，自动更新 View 和 Model 之间的数据同步。</p><h3 id="mvvm-的优点" tabindex="-1">MVVM 的优点 <a class="header-anchor" href="#mvvm-的优点" aria-label="Permalink to &quot;MVVM 的优点&quot;">​</a></h3><ol><li><strong>分离关注点</strong>：通过将 View 和 Model 分离，可以使代码更加模块化，易于管理和维护。</li><li><strong>代码复用</strong>：Model 和 ViewModel 可以在不同的 View 中重用，提高了代码的复用性。</li><li><strong>测试性强</strong>：由于业务逻辑和 UI 分离，Model 和 ViewModel 可以单独进行单元测试，提高了代码的可测试性。</li><li><strong>数据绑定</strong>：通过数据绑定技术，View 和 Model 之间的数据同步变得更加简单和高效。</li></ol><h3 id="mvvm-在前端框架中的应用" tabindex="-1">MVVM 在前端框架中的应用 <a class="header-anchor" href="#mvvm-在前端框架中的应用" aria-label="Permalink to &quot;MVVM 在前端框架中的应用&quot;">​</a></h3><h4 id="vue-js" tabindex="-1">Vue.js <a class="header-anchor" href="#vue-js" aria-label="Permalink to &quot;Vue.js&quot;">​</a></h4><p>在 Vue.js 中，View 是模板（template），Model 是 Vue 实例的 data 属性，ViewModel 是 Vue 实例本身。Vue.js 提供了双向数据绑定（v-model）和指令（directives），使得 View 和 ViewModel 之间的数据同步变得非常简单。</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">message</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{{ message }}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      message: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, Vue!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="结论" tabindex="-1">结论 <a class="header-anchor" href="#结论" aria-label="Permalink to &quot;结论&quot;">​</a></h3><p>MVVM 模式通过将用户界面与业务逻辑分离，使得代码更加模块化和易于维护。现代前端框架（如 Vue.js、Angular 和 React）都采用了 MVVM 或类似的架构模式，极大地简化了前端开发过程。通过使用 MVVM 模式，开发者可以更好地管理复杂的应用状态和用户交互，提高开发效率和代码质量。</p><h2 id="_2-vue2-和-vue3-双向数据绑定实现原理" tabindex="-1">2. Vue2 和 Vue3 双向数据绑定实现原理 <a class="header-anchor" href="#_2-vue2-和-vue3-双向数据绑定实现原理" aria-label="Permalink to &quot;2. Vue2 和 Vue3 双向数据绑定实现原理&quot;">​</a></h2><h3 id="vue2" tabindex="-1">Vue2 <a class="header-anchor" href="#vue2" aria-label="Permalink to &quot;Vue2&quot;">​</a></h3><p>Vue2 通过 <code>Object.defineProperty</code> 实现双向数据绑定：</p><ol><li>使用 <code>Object.defineProperty</code> 方法监听对象属性。</li><li><code>Object.defineProperty</code> 的第三个参数是一个配置对象，包含 <code>get</code> 和 <code>set</code> 方法。</li><li><code>set</code> 方法在数据修改时触发，更新视图。</li><li><code>get</code> 方法在访问数据时触发，返回数据。</li><li>对于嵌套对象，需要递归监听。</li><li>数组类型不能直接使用 <code>Object.defineProperty</code>，需要单独处理。</li></ol><h3 id="vue3" tabindex="-1">Vue3 <a class="header-anchor" href="#vue3" aria-label="Permalink to &quot;Vue3&quot;">​</a></h3><p>Vue3 通过 <code>Proxy</code> 实现双向数据绑定：</p><ol><li><code>Proxy</code> 可以直接监听对象和数组的变化。</li><li><code>Proxy</code> 提供了一种更强大和灵活的方式来拦截和处理对象的操作。</li></ol><h2 id="_3-自定义指令" tabindex="-1">3. 自定义指令 <a class="header-anchor" href="#_3-自定义指令" aria-label="Permalink to &quot;3. 自定义指令&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Vue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">directive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;指令名&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  bind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">el</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">binding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 绑定指令时调用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  inserted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">el</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">binding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 插入元素时调用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">el</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">binding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 更新元素时调用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  componentUpdated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">el</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">binding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 组件更新时调用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  unbind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">el</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">binding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 解绑指令时调用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>使用：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-指令名字</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;值&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="_4-v-if-和-v-show" tabindex="-1">4. v-if 和 v-show <a class="header-anchor" href="#_4-v-if-和-v-show" aria-label="Permalink to &quot;4. v-if 和 v-show&quot;">​</a></h2><h3 id="使用场景" tabindex="-1">使用场景 <a class="header-anchor" href="#使用场景" aria-label="Permalink to &quot;使用场景&quot;">​</a></h3><ul><li><code>v-if</code>：条件渲染，元素在条件为假时不会被渲染到 DOM 中。</li><li><code>v-show</code>：通过 CSS 的 <code>display</code> 属性控制显示和隐藏，元素总是会被渲染到 DOM 中。</li></ul><h2 id="_5-v-if-和-v-for" tabindex="-1">5. v-if 和 v-for <a class="header-anchor" href="#_5-v-if-和-v-for" aria-label="Permalink to &quot;5. v-if 和 v-for&quot;">​</a></h2><p>警告：不要在同一个元素上同时使用 <code>v-if</code> 和 <code>v-for</code>。</p><p>正确用法：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;item in items&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> :key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;item.id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;condition&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="_6-key-优化" tabindex="-1">6. key （优化） <a class="header-anchor" href="#_6-key-优化" aria-label="Permalink to &quot;6. key （优化）&quot;">​</a></h2><p><code>key</code> 用于优化虚拟 DOM 的渲染：</p><ol><li>在虚拟 DOM 中添加唯一标识。</li><li><code>diff</code> 算法比较前后虚拟 DOM，通过 <code>key</code> 快速定位变化。</li><li><code>key</code> 在同级中唯一。</li><li>在某些情况下，通过改变 <code>key</code> 可以重新创建组件。</li></ol><h2 id="_7-组件通信" tabindex="-1">7. 组件通信 <a class="header-anchor" href="#_7-组件通信" aria-label="Permalink to &quot;7. 组件通信&quot;">​</a></h2><h3 id="常用方法" tabindex="-1">常用方法 <a class="header-anchor" href="#常用方法" aria-label="Permalink to &quot;常用方法&quot;">​</a></h3><ol><li>父传子：使用 <code>props</code>。</li><li>子传父：使用 <code>$emit()</code> 和自定义事件。</li><li>事件总线：使用 <code>$emit()</code> 和 <code>$on()</code>。</li><li>插槽：普通插槽、具名插槽、作用域插槽。</li><li><code>ref</code>：获取组件实例或 DOM 元素。</li><li><code>this.$parent</code> 和 <code>this.$children</code>：访问父组件和子组件。</li><li><code>this.$root</code>：访问根实例。</li><li><code>mixin</code>：混入。</li><li><code>Vue.prototype</code>：扩展 Vue 实例。</li><li>本地存储：如 <code>localStorage</code>。</li><li><code>vuex</code>：状态管理。</li><li><code>provide</code> 和 <code>inject</code>：父组件提供数据，子组件注入数据。</li></ol><h2 id="_8-watch-和-computed-优化" tabindex="-1">8. watch 和 computed （优化） <a class="header-anchor" href="#_8-watch-和-computed-优化" aria-label="Permalink to &quot;8. watch 和 computed （优化）&quot;">​</a></h2><ul><li><code>watch</code>：用于监听数据变化并执行异步操作。</li><li><code>computed</code>：用于计算属性，依赖多个数据源。</li></ul><h2 id="_9-生命周期" tabindex="-1">9. 生命周期 <a class="header-anchor" href="#_9-生命周期" aria-label="Permalink to &quot;9. 生命周期&quot;">​</a></h2><p>Vue 的生命周期钩子函数：</p><ol><li><code>beforeCreate</code></li><li><code>created</code></li><li><code>beforeMount</code></li><li><code>mounted</code></li><li><code>beforeUpdate</code></li><li><code>updated</code></li><li><code>beforeDestroy</code>（Vue2）</li><li><code>destroyed</code>（Vue2）</li></ol><p>Vue3 中，<code>beforeUnmount</code> 和 <code>unmounted</code> 替代了 Vue2 的 <code>beforeDestroy</code> 和 <code>destroyed</code>。</p><h2 id="_10-vue-loader" tabindex="-1">10. vue-loader <a class="header-anchor" href="#_10-vue-loader" aria-label="Permalink to &quot;10. vue-loader&quot;">​</a></h2><p>在 Webpack 中处理 <code>.vue</code> 文件需要使用 <code>vue-loader</code>，这是一个专门用于解析和编译 Vue 组件的 Webpack Loader。</p><h2 id="_11-keep-alive-优化" tabindex="-1">11. keep-alive （优化） <a class="header-anchor" href="#_11-keep-alive-优化" aria-label="Permalink to &quot;11. keep-alive （优化）&quot;">​</a></h2><p><code>keep-alive</code> 用于缓存组件，避免重复创建和销毁：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">keep-alive</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> include</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;componentName&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> exclude</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;componentName&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">router-view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">router-view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">keep-alive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>新增两个生命周期钩子：</p><ol><li><code>activated</code>：组件被激活时调用。</li><li><code>deactivated</code>：组件被停用时调用。</li></ol><h2 id="_12-nexttick" tabindex="-1">12. $nextTick <a class="header-anchor" href="#_12-nexttick" aria-label="Permalink to &quot;12. $nextTick&quot;">​</a></h2><p><code>$nextTick</code> 用于在 DOM 更新后执行回调函数：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$nextTick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // DOM 更新完成后执行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="_13-forceupdate" tabindex="-1">13. $forceUpdate <a class="header-anchor" href="#_13-forceupdate" aria-label="Permalink to &quot;13. $forceUpdate&quot;">​</a></h2><p><code>$forceUpdate</code> 强制组件重新渲染，可能会消耗性能。</p><h2 id="_14-set-和-data" tabindex="-1">14. $set 和 $data <a class="header-anchor" href="#_14-set-和-data" aria-label="Permalink to &quot;14. $set 和 $data&quot;">​</a></h2><p>在 Vue.js 中，<code>$set</code> 和 <code>$data</code> 是两个用于操作组件数据的属性和方法。它们在不同的场景中有不同的用途和适用性。</p><h3 id="set" tabindex="-1"><code>$set</code> <a class="header-anchor" href="#set" aria-label="Permalink to &quot;\`$set\`&quot;">​</a></h3><p><code>$set</code> 是 Vue 实例方法，用于在对象上设置属性，确保新属性是响应式的。它通常用于以下几种情况：</p><ol><li><strong>向响应式对象添加新属性</strong>：由于 Vue 的响应式系统的限制，直接添加新属性不会触发视图更新。使用 <code>$set</code> 可以确保新属性是响应式的。</li><li><strong>更新数组中的特定元素</strong>：使用 <code>Vue.set</code> 或实例方法 <code>$set</code> 可以确保数组元素的更新是响应式的。</li></ol><h4 id="语法" tabindex="-1">语法 <a class="header-anchor" href="#语法" aria-label="Permalink to &quot;语法&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 向对象添加新属性</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Vue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(target, key, value);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 或者在组件实例中使用 $set</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(target, key, value);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 更新数组中的元素</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Vue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(array, index, value);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 或者在组件实例中使用 $set</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(array, index, value);</span></span></code></pre></div><h4 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 向对象添加新属性</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.someObject, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;newProperty&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;newValue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 更新数组中的元素</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.someArray, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;newValue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h3 id="data" tabindex="-1"><code>$data</code> <a class="header-anchor" href="#data" aria-label="Permalink to &quot;\`$data\`&quot;">​</a></h3><p><code>$data</code> 是 Vue 实例的一个属性，包含了组件的所有数据对象。通过访问 <code>$data</code>，你可以获取或设置组件的所有数据。</p><h4 id="访问和设置数据" tabindex="-1">访问和设置数据 <a class="header-anchor" href="#访问和设置数据" aria-label="Permalink to &quot;访问和设置数据&quot;">​</a></h4><ul><li><strong>访问数据</strong>：你可以通过 <code>this.$data</code> 访问组件的所有数据对象。</li><li><strong>设置数据</strong>：你可以通过直接赋值 <code>this.$data</code> 来替换整个数据对象。</li></ul><h4 id="语法-1" tabindex="-1">语法 <a class="header-anchor" href="#语法-1" aria-label="Permalink to &quot;语法&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 访问数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.$data.someProperty);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 设置数据（替换整个数据对象）</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.$data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  newProperty: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;newValue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  anotherProperty: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;anotherValue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h4 id="示例-1" tabindex="-1">示例 <a class="header-anchor" href="#示例-1" aria-label="Permalink to &quot;示例&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 访问数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.$data.someProperty);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 设置数据</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.$data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  newProperty: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;newValue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  anotherProperty: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;anotherValue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><ul><li><strong><code>$set</code></strong>：用于向响应式对象添加新属性或更新数组中的特定元素，确保这些更改是响应式的。</li><li><strong><code>$data</code></strong>：包含组件的所有数据对象，可以用来访问或替换整个数据对象。</li></ul><p>这两个方法和属性在不同的场景中都有其特定的用途，合理使用它们可以帮助你更好地管理和操作 Vue 组件的数据。</p><h2 id="_15-自定义过滤器" tabindex="-1">15. 自定义过滤器 <a class="header-anchor" href="#_15-自定义过滤器" aria-label="Permalink to &quot;15. 自定义过滤器&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Vue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;filterName&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 逻辑处理</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>使用：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{{ value | filterName }}</span></span></code></pre></div><h2 id="_16-路由模式" tabindex="-1">16. 路由模式 <a class="header-anchor" href="#_16-路由模式" aria-label="Permalink to &quot;16. 路由模式&quot;">​</a></h2><h3 id="hash-模式" tabindex="-1">Hash 模式 <a class="header-anchor" href="#hash-模式" aria-label="Permalink to &quot;Hash 模式&quot;">​</a></h3><ul><li>使用 <code>onhashchange</code> 事件。</li><li>URL 中带有 <code>#</code>。</li><li>不需要服务器配置。</li></ul><h3 id="history-模式" tabindex="-1">History 模式 <a class="header-anchor" href="#history-模式" aria-label="Permalink to &quot;History 模式&quot;">​</a></h3><ul><li>使用 <code>History API</code>（<code>pushState</code> 和 <code>replaceState</code>）。</li><li>URL 中没有 <code>#</code>。</li><li>需要服务器配置，以避免刷新时出现 404 错误。</li></ul><h2 id="_17-路由传参" tabindex="-1">17. 路由传参 <a class="header-anchor" href="#_17-路由传参" aria-label="Permalink to &quot;17. 路由传参&quot;">​</a></h2><ol><li>动态路由：<code>path</code> + <code>:id</code></li><li>查询参数：<code>:to=&quot;{ path: &#39;/path&#39;, query: { key: value } }&quot;</code></li><li>命名路由 + <code>params</code></li></ol><h2 id="_18-懒加载-优化" tabindex="-1">18. 懒加载 （优化） <a class="header-anchor" href="#_18-懒加载-优化" aria-label="Permalink to &quot;18. 懒加载 （优化）&quot;">​</a></h2><p>使用 <code>import</code> 动态导入组件，实现路由懒加载：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Component</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;path/to/component&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="_19-route-和-router" tabindex="-1">19. $route 和 $router <a class="header-anchor" href="#_19-route-和-router" aria-label="Permalink to &quot;19. $route 和 $router&quot;">​</a></h2><h3 id="route" tabindex="-1">$route <a class="header-anchor" href="#route" aria-label="Permalink to &quot;$route&quot;">​</a></h3><ul><li>包含路由信息，没有方法。</li><li><code>params</code>：动态路由参数。</li><li><code>query</code>：查询参数。</li><li><code>path</code>：当前路径。</li><li><code>matched</code>：匹配的路由数组。</li></ul><h3 id="router" tabindex="-1">$router <a class="header-anchor" href="#router" aria-label="Permalink to &quot;$router&quot;">​</a></h3><ul><li>包含路由方法。</li><li><code>push()</code>、<code>replace()</code>、<code>go()</code></li><li><code>options.routes</code>：路由表。</li><li><code>addRoutes()</code>：动态添加路由。</li></ul><h2 id="_20-命名路由-命名视图" tabindex="-1">20. 命名路由 ， 命名视图 <a class="header-anchor" href="#_20-命名路由-命名视图" aria-label="Permalink to &quot;20. 命名路由 ， 命名视图&quot;">​</a></h2><h3 id="命名路由" tabindex="-1">命名路由 <a class="header-anchor" href="#命名路由" aria-label="Permalink to &quot;命名路由&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/path&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;routeName&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: Component }</span></span></code></pre></div><h3 id="命名视图" tabindex="-1">命名视图 <a class="header-anchor" href="#命名视图" aria-label="Permalink to &quot;命名视图&quot;">​</a></h3><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">router-view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;viewName&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">router-view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="_21-router-link" tabindex="-1">21. router-link <a class="header-anchor" href="#_21-router-link" aria-label="Permalink to &quot;21. router-link&quot;">​</a></h2><h3 id="属性" tabindex="-1">属性 <a class="header-anchor" href="#属性" aria-label="Permalink to &quot;属性&quot;">​</a></h3><ul><li><code>exact</code>：精确匹配。</li><li><code>activeClass</code>：自定义激活类名。</li></ul><h2 id="_22-导航守卫" tabindex="-1">22. 导航守卫 <a class="header-anchor" href="#_22-导航守卫" aria-label="Permalink to &quot;22. 导航守卫&quot;">​</a></h2><h3 id="全局守卫" tabindex="-1">全局守卫 <a class="header-anchor" href="#全局守卫" aria-label="Permalink to &quot;全局守卫&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">router.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">beforeEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 登录验证</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">router.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">afterEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 路由跳转后</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h3 id="路由独享守卫" tabindex="-1">路由独享守卫 <a class="header-anchor" href="#路由独享守卫" aria-label="Permalink to &quot;路由独享守卫&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">beforeEnter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h3 id="组件内守卫" tabindex="-1">组件内守卫 <a class="header-anchor" href="#组件内守卫" aria-label="Permalink to &quot;组件内守卫&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">beforeRouteEnter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(to, from, next) {}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">beforeRouteLeave</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(to, from, next) {}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">beforeRouteUpdate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(to, from, next) {}</span></span></code></pre></div><h2 id="_23-vuex" tabindex="-1">23. Vuex <a class="header-anchor" href="#_23-vuex" aria-label="Permalink to &quot;23. Vuex&quot;">​</a></h2><p>Vuex 和 Pinia 都是用于管理 Vue.js 应用状态的库，但它们在设计和使用上有一些显著的不同。以下是对 Vuex 核心概念的介绍以及与 Pinia 的对比。</p><h3 id="vuex-核心概念" tabindex="-1">Vuex 核心概念 <a class="header-anchor" href="#vuex-核心概念" aria-label="Permalink to &quot;Vuex 核心概念&quot;">​</a></h3><ol><li><strong>State</strong>：状态，存储应用的全局状态。</li><li><strong>Mutations</strong>：同步方法，用于修改状态。</li><li><strong>Getters</strong>：类似于计算属性，用于从状态派生出新的数据。</li><li><strong>Actions</strong>：用于处理异步操作，可以包含任意异步逻辑，并最终提交 mutations。</li><li><strong>Modules</strong>：用于将状态和变更逻辑分割到多个模块中，便于管理大型应用。</li></ol><h3 id="pinia-核心概念" tabindex="-1">Pinia 核心概念 <a class="header-anchor" href="#pinia-核心概念" aria-label="Permalink to &quot;Pinia 核心概念&quot;">​</a></h3><p>Pinia 是 Vuex 的替代品，提供了更加简洁和现代的 API。以下是 Pinia 的核心概念：</p><ol><li><strong>State</strong>：同样用于存储应用的全局状态。</li><li><strong>Getters</strong>：类似于 Vuex 的 getters，但在 Pinia 中，getters 是 store 的一部分，定义方式更加简洁。</li><li><strong>Actions</strong>：与 Vuex 的 actions 类似，但 Pinia 中的 actions 可以是同步或异步的，没有严格区分。</li><li><strong>Stores</strong>：Pinia 使用 store 的概念，每个 store 是一个独立的状态管理单元，类似于 Vuex 的模块。</li></ol><h3 id="对比-vuex-和-pinia" tabindex="-1">对比 Vuex 和 Pinia <a class="header-anchor" href="#对比-vuex-和-pinia" aria-label="Permalink to &quot;对比 Vuex 和 Pinia&quot;">​</a></h3><ol><li><p><strong>API 简洁性</strong>：</p><ul><li><strong>Vuex</strong>：需要定义 mutations 和 actions，actions 主要用于异步操作，而 mutations 只能进行同步操作。</li><li><strong>Pinia</strong>：没有严格区分 mutations 和 actions，actions 可以同步或异步，API 更加简洁和直观。</li></ul></li><li><p><strong>TypeScript 支持</strong>：</p><ul><li><strong>Vuex</strong>：虽然 Vuex 也支持 TypeScript，但需要额外的配置和 boilerplate 代码。</li><li><strong>Pinia</strong>：从设计上就考虑了 TypeScript 支持，使用 TypeScript 更加方便和自然。</li></ul></li><li><p><strong>模块化</strong>：</p><ul><li><strong>Vuex</strong>：通过 modules 实现模块化，每个模块都有自己的 state、mutations、actions 和 getters。</li><li><strong>Pinia</strong>：通过 store 实现模块化，每个 store 是一个独立的状态管理单元，定义和使用更加简洁。</li></ul></li><li><p><strong>开发体验</strong>：</p><ul><li><strong>Vuex</strong>：需要定义较多的 boilerplate 代码，如 mutations 和 actions，使用起来相对繁琐。</li><li><strong>Pinia</strong>：API 设计更加现代和简洁，减少了样板代码，开发体验更好。</li></ul></li></ol><h3 id="示例对比" tabindex="-1">示例对比 <a class="header-anchor" href="#示例对比" aria-label="Permalink to &quot;示例对比&quot;">​</a></h3><h4 id="vuex-示例" tabindex="-1">Vuex 示例 <a class="header-anchor" href="#vuex-示例" aria-label="Permalink to &quot;Vuex 示例&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// store.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Vue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;vue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Vuex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;vuex&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Vue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Vuex);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Vuex.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Store</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  state: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    count: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  mutations: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    increment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      state.count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  actions: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    incrementAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">commit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        commit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;increment&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  getters: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    doubleCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> state.count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h4 id="pinia-示例" tabindex="-1">Pinia 示例 <a class="header-anchor" href="#pinia-示例" aria-label="Permalink to &quot;Pinia 示例&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// store.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { defineStore } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;pinia&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> useCounterStore</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineStore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;counter&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    count: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  getters: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    doubleCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> state.count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  actions: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    increment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    incrementAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">increment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h3 id="结论-1" tabindex="-1">结论 <a class="header-anchor" href="#结论-1" aria-label="Permalink to &quot;结论&quot;">​</a></h3><ul><li><strong>Vuex</strong>：适合大型项目，尤其是已经使用 Vuex 的项目。它提供了成熟且功能丰富的状态管理解决方案，但需要编写较多的样板代码。</li><li><strong>Pinia</strong>：适合新项目或希望简化状态管理的项目。它提供了更加现代和简洁的 API，减少了样板代码，提升了开发体验，并且对 TypeScript 支持更好。</li></ul><p>选择 Vuex 还是 Pinia，取决于你的项目需求和团队的偏好。如果你更喜欢简洁的代码和更好的 TypeScript 支持，Pinia 是一个很好的选择。</p><h2 id="_24-vue-配置跨域" tabindex="-1">24. Vue 配置跨域 <a class="header-anchor" href="#_24-vue-配置跨域" aria-label="Permalink to &quot;24. Vue 配置跨域&quot;">​</a></h2><h3 id="vue-cli" tabindex="-1">Vue CLI <a class="header-anchor" href="#vue-cli" aria-label="Permalink to &quot;Vue CLI&quot;">​</a></h3><p>在 <code>vue.config.js</code> 中配置 <code>proxy</code>：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  devServer: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    proxy: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://api.example.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h3 id="vite" tabindex="-1">Vite <a class="header-anchor" href="#vite" aria-label="Permalink to &quot;Vite&quot;">​</a></h3><p>在 <code>vite.config.js</code> 中配置 <code>proxy</code>：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  server: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    proxy: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;/api&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://api.example.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h2 id="_25-vue-版本" tabindex="-1">25. Vue 版本 <a class="header-anchor" href="#_25-vue-版本" aria-label="Permalink to &quot;25. Vue 版本&quot;">​</a></h2><ul><li>Vue2：2.5.7 到 2.6.11</li><li>Vue3</li></ul><h2 id="_26-element-ui-和-vant" tabindex="-1">26. Element-UI 和 Vant <a class="header-anchor" href="#_26-element-ui-和-vant" aria-label="Permalink to &quot;26. Element-UI 和 Vant&quot;">​</a></h2><p>需要了解这两个流行的 UI 框架。</p><h2 id="_27-vue-优化" tabindex="-1">27. Vue 优化 <a class="header-anchor" href="#_27-vue-优化" aria-label="Permalink to &quot;27. Vue 优化&quot;">​</a></h2><ol><li>组件化开发。</li><li>路由懒加载。</li><li><code>keep-alive</code> 缓存。</li><li>使用 <code>watch</code> 和 <code>computed</code>。</li><li>数据分页。</li><li>静态文件放置在 <code>assets</code> 目录。</li><li><code>axios</code> 二次封装。</li><li>数据扁平化，减少嵌套层级。</li></ol><h2 id="_28-axios-二次封装" tabindex="-1">28. Axios 二次封装 <a class="header-anchor" href="#_28-axios-二次封装" aria-label="Permalink to &quot;28. Axios 二次封装&quot;">​</a></h2><h3 id="请求拦截器" tabindex="-1">请求拦截器 <a class="header-anchor" href="#请求拦截器" aria-label="Permalink to &quot;请求拦截器&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">axios.interceptors.request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 传递 token</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 请求数据格式转换</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> config;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h3 id="响应拦截器" tabindex="-1">响应拦截器 <a class="header-anchor" href="#响应拦截器" aria-label="Permalink to &quot;响应拦截器&quot;">​</a></h3><ul><li>处理响应</li><li>判断 token 是否失效（由后端决定）</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">axios.interceptors.response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 处理响应</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 错误处理</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(error);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="vue3-1" tabindex="-1">Vue3 <a class="header-anchor" href="#vue3-1" aria-label="Permalink to &quot;Vue3&quot;">​</a></h2><h3 id="创建项目" tabindex="-1">创建项目 <a class="header-anchor" href="#创建项目" aria-label="Permalink to &quot;创建项目&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vite</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vue3</span></span></code></pre></div><h2 id="vue2-和-vue3" tabindex="-1">Vue2 和 Vue3 <a class="header-anchor" href="#vue2-和-vue3" aria-label="Permalink to &quot;Vue2 和 Vue3&quot;">​</a></h2><h3 id="比较" tabindex="-1">比较 <a class="header-anchor" href="#比较" aria-label="Permalink to &quot;比较&quot;">​</a></h3><table tabindex="0"><thead><tr><th></th><th>Vue2</th><th>Vue3</th></tr></thead><tbody><tr><td>创建方式</td><td>webpack --- vue create app</td><td>Vite npm init vite</td></tr><tr><td>响应式原理</td><td>Object.defineProperty()</td><td>Proxy</td></tr><tr><td>ts 使用</td><td>Vue</td><td>Vue3 +ts</td></tr><tr><td>Setup</td><td>不支持</td><td>setup 语法 onMounted,ref,reactive,toRef,toRefs,defineProps,defineEmits,watch,watchEffect, useRoute,useRouter,useStore</td></tr><tr><td>生命周期</td><td>8</td><td>7 销毁有改变</td></tr><tr><td>Keepalive</td><td><code>&lt;keep-alive&gt;&lt;app/&gt;&lt;/keep-alive&gt;</code></td><td><code>&lt;router-view v-slot=&quot;{ Component }&quot;&gt; &lt;keep-alive include=&#39;&#39;&gt; &lt;component :is=&quot;Component&quot; v-if=&quot;$route.meta.keepAlive&quot;/&gt; &lt;/keep-alive&gt; &lt;component :is=&quot;Component&quot; v-if=&quot;!$route.meta.keepAlive&quot;/&gt; &lt;/router-view&gt;</code></td></tr><tr><td>router</td><td>Vue-router3</td><td>Vue-router4</td></tr><tr><td>状态管理</td><td>Vuex</td><td>Pinia</td></tr><tr><td>ui 框架</td><td>Element-ui</td><td>Element-plus</td></tr></tbody></table><h2 id="打包后容易出现的问题" tabindex="-1">打包后容易出现的问题 <a class="header-anchor" href="#打包后容易出现的问题" aria-label="Permalink to &quot;打包后容易出现的问题&quot;">​</a></h2><ol><li>跨域问题：使用 <code>proxy</code> 或者后端同源部署。</li><li>刷新出现 404：使用 <code>history</code> 模式时需要服务器配置。</li><li>页面空白：需要修改 <code>webpack</code> 或 <code>vite</code> 配置中的 <code>publicPath</code>。（&quot;/&quot; 改 &#39;./&#39;）</li></ol>`,158)],c=s(t,[["render",function(l,h,p,k,d,r){return a(),i("div",null,n)}]]);export{E as __pageData,c as default};
